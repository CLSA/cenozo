-- MySQL Script generated by MySQL Workbench
-- Tue 19 May 2015 03:10:37 PM EDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='';

-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `cenozo` ;

-- -----------------------------------------------------
-- Schema cenozo
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cenozo` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
-- -----------------------------------------------------
-- Schema application
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `application` ;

-- -----------------------------------------------------
-- Schema application
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `application` ;
USE `cenozo` ;

-- -----------------------------------------------------
-- Table `cenozo`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `password` VARCHAR(255) NULL DEFAULT NULL,
  `first_name` VARCHAR(255) NOT NULL,
  `last_name` VARCHAR(255) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `email` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `dk_active` (`active` ASC),
  UNIQUE INDEX `uq_email` (`email` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `tier` INT UNSIGNED NOT NULL DEFAULT 1 COMMENT '1 = normal, 2 = site admin, 3 = global admin',
  `all_sites` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`region`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`region` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`region` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `abbreviation` VARCHAR(5) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_abbreviation` (`abbreviation` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`cohort`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`cohort` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`cohort` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`event_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`event_type` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`event_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`language`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`language` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`language` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 0,
  `code` CHAR(2) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_code` (`code` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  `version` VARCHAR(45) NOT NULL,
  `cenozo` VARCHAR(45) NOT NULL,
  `release_based` TINYINT(1) NOT NULL DEFAULT 1,
  `release_event_type_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL COMMENT 'The applications default language',
  `country` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_release_event_type_id` (`release_event_type_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_application_release_event_type_id`
    FOREIGN KEY (`release_event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`site` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `timezone` ENUM('Canada/Pacific','Canada/Mountain','Canada/Central','Canada/Eastern','Canada/Atlantic','Canada/Newfoundland') NOT NULL,
  `title` VARCHAR(45) NULL,
  `phone_number` VARCHAR(45) NULL,
  `address1` VARCHAR(512) NULL,
  `address2` VARCHAR(512) NULL,
  `city` VARCHAR(100) NULL,
  `region_id` INT UNSIGNED NULL,
  `postcode` VARCHAR(10) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name_application_id` (`name` ASC, `application_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_site_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_site_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`access`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`access` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`access` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `datetime` DATETIME NULL COMMENT 'The last time the access was used',
  `microtime` DOUBLE NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_user_id_role_id_site_id` (`user_id` ASC, `role_id` ASC, `site_id` ASC),
  INDEX `dk_datetime_microtime` (`datetime` DESC, `microtime` DESC),
  CONSTRAINT `fk_access_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_access_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_access_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`postcode`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`postcode` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`postcode` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(7) NOT NULL COMMENT 'Postcodes with the same province, tz and dst are grouped.',
  `region_id` INT UNSIGNED NOT NULL,
  `timezone_offset` FLOAT NOT NULL,
  `daylight_savings` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  CONSTRAINT `fk_postcode_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`age_group`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`age_group` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`age_group` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `lower` INT NOT NULL,
  `upper` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_lower` (`lower` ASC),
  UNIQUE INDEX `uq_upper` (`upper` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`source`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`source` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`source` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `override_quota` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`state`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`state` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`state` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `rank` INT NOT NULL,
  `description` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC),
  UNIQUE INDEX `uq_rank` (`rank` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `uid` VARCHAR(45) NOT NULL COMMENT 'External unique ID',
  `source_id` INT UNSIGNED NULL DEFAULT NULL,
  `cohort_id` INT UNSIGNED NOT NULL,
  `grouping` VARCHAR(45) NULL DEFAULT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `other_name` VARCHAR(100) NULL DEFAULT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `sex` ENUM('male','female') NOT NULL,
  `date_of_birth` DATE NULL DEFAULT NULL,
  `age_group_id` INT UNSIGNED NULL DEFAULT NULL,
  `state_id` INT UNSIGNED NULL DEFAULT NULL,
  `language_id` INT UNSIGNED NULL DEFAULT NULL,
  `use_informant` TINYINT(1) NULL DEFAULT NULL,
  `override_quota` TINYINT(1) NOT NULL DEFAULT 0,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `email_datetime` DATETIME NULL DEFAULT NULL,
  `email_old` VARCHAR(255) NULL DEFAULT NULL,
  `mass_email` TINYINT(1) NOT NULL DEFAULT 1,
  `withdraw_letter` CHAR(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_uid` (`uid` ASC),
  INDEX `dk_active` (`active` ASC),
  INDEX `dk_uid` (`uid` ASC),
  INDEX `fk_age_group_id` (`age_group_id` ASC),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_source_id` (`source_id` ASC),
  INDEX `fk_state_id` (`state_id` ASC),
  INDEX `dk_email_datetime` (`email_datetime` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_participant_age_group_id`
    FOREIGN KEY (`age_group_id`)
    REFERENCES `cenozo`.`age_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_source_id`
    FOREIGN KEY (`source_id`)
    REFERENCES `cenozo`.`source` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_state_id`
    FOREIGN KEY (`state_id`)
    REFERENCES `cenozo`.`state` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`alternate` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`alternate` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `alternate` TINYINT(1) NOT NULL DEFAULT 0,
  `informant` TINYINT(1) NOT NULL DEFAULT 0,
  `proxy` TINYINT(1) NOT NULL DEFAULT 0,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `association` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_alternate_participant`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`address` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NULL,
  `participant_id` INT UNSIGNED NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `rank` INT NOT NULL,
  `international` TINYINT(1) NOT NULL DEFAULT 0,
  `address1` VARCHAR(512) NOT NULL,
  `address2` VARCHAR(512) NULL DEFAULT NULL,
  `city` VARCHAR(100) NOT NULL,
  `region_id` INT UNSIGNED NULL,
  `postcode` VARCHAR(10) NULL,
  `timezone_offset` FLOAT NOT NULL,
  `daylight_savings` TINYINT(1) NOT NULL,
  `january` TINYINT(1) NOT NULL DEFAULT 1,
  `february` TINYINT(1) NOT NULL DEFAULT 1,
  `march` TINYINT(1) NOT NULL DEFAULT 1,
  `april` TINYINT(1) NOT NULL DEFAULT 1,
  `may` TINYINT(1) NOT NULL DEFAULT 1,
  `june` TINYINT(1) NOT NULL DEFAULT 1,
  `july` TINYINT(1) NOT NULL DEFAULT 1,
  `august` TINYINT(1) NOT NULL DEFAULT 1,
  `september` TINYINT(1) NOT NULL DEFAULT 1,
  `october` TINYINT(1) NOT NULL DEFAULT 1,
  `november` TINYINT(1) NOT NULL DEFAULT 1,
  `december` TINYINT(1) NOT NULL DEFAULT 1,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `dk_city` (`city` ASC),
  INDEX `dk_postcode` (`postcode` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  UNIQUE INDEX `uq_alternate_id_participant_id_rank` (`alternate_id` ASC, `participant_id` ASC, `rank` ASC),
  CONSTRAINT `fk_address_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`availability`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`availability` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`availability` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `monday` TINYINT(1) NOT NULL DEFAULT 0,
  `tuesday` TINYINT(1) NOT NULL DEFAULT 0,
  `wednesday` TINYINT(1) NOT NULL DEFAULT 0,
  `thursday` TINYINT(1) NOT NULL DEFAULT 0,
  `friday` TINYINT(1) NOT NULL DEFAULT 0,
  `saturday` TINYINT(1) NOT NULL DEFAULT 0,
  `sunday` TINYINT(1) NOT NULL DEFAULT 0,
  `start_time` TIME NOT NULL,
  `end_time` TIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_start_time` (`start_time` ASC),
  INDEX `dk_end_time` (`end_time` ASC),
  CONSTRAINT `fk_availability_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`consent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`consent` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`consent` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `accept` TINYINT(1) NOT NULL,
  `written` TINYINT(1) NOT NULL,
  `date` DATE NOT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_date` (`date` ASC),
  CONSTRAINT `fk_consent_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`jurisdiction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`jurisdiction` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`jurisdiction` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `postcode` VARCHAR(7) NOT NULL,
  `longitude` FLOAT NOT NULL,
  `latitude` FLOAT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_site_id_postcode` (`site_id` ASC, `postcode` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `dk_postcode` (`postcode` ASC),
  CONSTRAINT `fk_jurisdiction_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`phone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`phone` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`phone` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NULL,
  `participant_id` INT UNSIGNED NULL,
  `address_id` INT UNSIGNED NULL DEFAULT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `rank` INT NOT NULL,
  `type` ENUM('home','home2','work','work2','mobile','mobile2','other','other2') NOT NULL,
  `number` VARCHAR(45) NOT NULL,
  `note` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_address_id` (`address_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  UNIQUE INDEX `uq_alternate_id_participant_id_rank` (`alternate_id` ASC, `participant_id` ASC, `rank` ASC),
  CONSTRAINT `fk_phone_address`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE SET NULL
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_phone_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`quota`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`quota` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`quota` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `region_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `sex` ENUM('male','female') NOT NULL,
  `age_group_id` INT UNSIGNED NOT NULL,
  `population` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_region_id_site_id_sex_age_group_id` (`region_id` ASC, `site_id` ASC, `sex` ASC, `age_group_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `fk_age_group_id` (`age_group_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  CONSTRAINT `fk_quota_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_quota_age_group_id`
    FOREIGN KEY (`age_group_id`)
    REFERENCES `cenozo`.`age_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_quota_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`note`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`note` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`note` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `alternate_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NULL,
  `user_id` INT UNSIGNED NULL,
  `sticky` TINYINT(1) NOT NULL DEFAULT 0,
  `datetime` DATETIME NOT NULL,
  `note` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `dk_sticky_datetime` (`sticky` ASC, `datetime` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_alternate_id` (`alternate_id` ASC),
  CONSTRAINT `fk_note_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_note_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_note_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_participant` (
  `application_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `preferred_site_id` INT UNSIGNED NULL DEFAULT NULL,
  `datetime` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`application_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_preferred_site_id` (`preferred_site_id` ASC),
  CONSTRAINT `fk_application_has_participant_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_participant_preferred_site_id`
    FOREIGN KEY (`preferred_site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`event`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`event` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`event` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `event_type_id` INT UNSIGNED NOT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `dk_datetime` (`datetime` ASC),
  INDEX `fk_event_type_id` (`event_type_id` ASC),
  CONSTRAINT `fk_event_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_event_event_type_id`
    FOREIGN KEY (`event_type_id`)
    REFERENCES `cenozo`.`event_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`unique_identifier_pool`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`unique_identifier_pool` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`unique_identifier_pool` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `uid` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_uid` (`uid` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_cohort`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_cohort` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_cohort` (
  `application_id` INT UNSIGNED NOT NULL,
  `cohort_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `grouping` ENUM('region','jurisdiction') NOT NULL DEFAULT 'region',
  PRIMARY KEY (`application_id`, `cohort_id`),
  INDEX `fk_cohort_id` (`cohort_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_cohort_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_cohort_cohort_id`
    FOREIGN KEY (`cohort_id`)
    REFERENCES `cenozo`.`cohort` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`application_has_role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`application_has_role` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`application_has_role` (
  `application_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`application_id`, `role_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_application_id` (`application_id` ASC),
  CONSTRAINT `fk_application_has_role_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_has_role_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_application`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_application` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_application` (
  `user_id` INT UNSIGNED NOT NULL,
  `application_id` INT UNSIGNED NOT NULL,
  `theme` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`user_id`, `application_id`),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_application_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_application_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`hin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`hin` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`hin` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `access` TINYINT(1) NULL DEFAULT NULL,
  `future_access` TINYINT(1) NULL DEFAULT NULL,
  `code` VARCHAR(45) NULL DEFAULT NULL,
  `region_id` INT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_region_id` (`region_id` ASC),
  UNIQUE INDEX `uq_participant_id` (`participant_id` ASC),
  CONSTRAINT `fk_hin_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_hin_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`region_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`region_site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`region_site` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL COMMENT 'Used to determine a participant\'s default site.',
  `site_id` INT UNSIGNED NOT NULL,
  `region_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_region_id` (`region_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  UNIQUE INDEX `uq_site_id_region_id_language_id` (`site_id` ASC, `region_id` ASC, `language_id` ASC),
  INDEX `fk_language_id` (`language_id` ASC),
  CONSTRAINT `fk_region_site_region_id`
    FOREIGN KEY (`region_id`)
    REFERENCES `cenozo`.`region` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_region_site_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`role_has_state`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`role_has_state` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`role_has_state` (
  `role_id` INT UNSIGNED NOT NULL,
  `state_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`role_id`, `state_id`),
  INDEX `fk_state_id` (`state_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_role_has_state_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_state_state_id`
    FOREIGN KEY (`state_id`)
    REFERENCES `cenozo`.`state` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_language`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_language` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_language` (
  `user_id` INT UNSIGNED NOT NULL,
  `language_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`user_id`, `language_id`),
  INDEX `fk_language_id` (`language_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_language_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_language_language_id`
    FOREIGN KEY (`language_id`)
    REFERENCES `cenozo`.`language` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`collection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`collection` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`collection` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `active` TINYINT(1) NOT NULL DEFAULT 1,
  `locked` TINYINT(1) NOT NULL DEFAULT 0,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_name` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`collection_has_participant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`collection_has_participant` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`collection_has_participant` (
  `collection_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`collection_id`, `participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_collection_id` (`collection_id` ASC),
  CONSTRAINT `fk_collection_has_participant_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_collection_has_participant_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`user_has_collection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`user_has_collection` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`user_has_collection` (
  `user_id` INT UNSIGNED NOT NULL,
  `collection_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`user_id`, `collection_id`),
  INDEX `fk_collection_id` (`collection_id` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  CONSTRAINT `fk_user_has_collection_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_has_collection_collection_id`
    FOREIGN KEY (`collection_id`)
    REFERENCES `cenozo`.`collection` (`id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Users who can edit locked collections.';


-- -----------------------------------------------------
-- Table `cenozo`.`activity`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`activity` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`activity` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `start_datetime` DATETIME NOT NULL,
  `end_datetime` DATETIME NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_activity_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_activity_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_site`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_site` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_site` (
  `application_id` INT UNSIGNED NOT NULL,
  `participant_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NULL,
  `default_site_id` INT UNSIGNED NULL,
  PRIMARY KEY (`application_id`, `participant_id`),
  INDEX `fk_application_id` (`application_id` ASC),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_default_site_id` (`default_site_id` ASC),
  CONSTRAINT `fk_participant_site_application_id`
    FOREIGN KEY (`application_id`)
    REFERENCES `cenozo`.`application` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_site_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_site_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_site_default_site_id`
    FOREIGN KEY (`default_site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_primary_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_primary_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_primary_address` (
  `participant_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_participant_id` (`participant_id` ASC),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_participant_primary_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_primary_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`alternate_first_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`alternate_first_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`alternate_first_address` (
  `alternate_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`alternate_id`),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_alternate_first_address_alternate_id`
    FOREIGN KEY (`alternate_id`)
    REFERENCES `cenozo`.`alternate` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_alternate_first_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cenozo`.`participant_first_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cenozo`.`participant_first_address` ;

CREATE TABLE IF NOT EXISTS `cenozo`.`participant_first_address` (
  `participant_id` INT UNSIGNED NOT NULL,
  `address_id` INT UNSIGNED NULL,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  PRIMARY KEY (`participant_id`),
  INDEX `fk_address_id` (`address_id` ASC),
  CONSTRAINT `fk_participant_first_address_participant_id`
    FOREIGN KEY (`participant_id`)
    REFERENCES `cenozo`.`participant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_participant_first_address_address_id`
    FOREIGN KEY (`address_id`)
    REFERENCES `cenozo`.`address` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `application` ;

-- -----------------------------------------------------
-- Table `application`.`system_message`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `application`.`system_message` ;

CREATE TABLE IF NOT EXISTS `application`.`system_message` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `site_id` INT UNSIGNED NULL DEFAULT NULL,
  `role_id` INT UNSIGNED NULL DEFAULT NULL,
  `title` VARCHAR(255) NOT NULL,
  `note` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `fk_system_message_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_system_message_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `application`.`service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `application`.`service` ;

CREATE TABLE IF NOT EXISTS `application`.`service` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `update_timestamp` TIMESTAMP NOT NULL,
  `create_timestamp` TIMESTAMP NOT NULL,
  `method` ENUM('DELETE','GET','PATCH','POST','PUT') NOT NULL,
  `subject` VARCHAR(45) NOT NULL,
  `resource` TINYINT(1) NOT NULL DEFAULT 0,
  `restricted` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `uq_method_subject_resource` (`method` ASC, `subject` ASC, `resource` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `application`.`writelog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `application`.`writelog` ;

CREATE TABLE IF NOT EXISTS `application`.`writelog` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT UNSIGNED NOT NULL,
  `site_id` INT UNSIGNED NOT NULL,
  `role_id` INT UNSIGNED NOT NULL,
  `method` ENUM('DELETE','PATCH','POST','PUT') NOT NULL,
  `path` VARCHAR(512) NOT NULL,
  `elapsed` FLOAT NULL,
  `status` INT NULL,
  `datetime` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `fk_site_id` (`site_id` ASC),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `dk_datetime` (`datetime` DESC),
  CONSTRAINT `fk_writelog_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `cenozo`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_site_id`
    FOREIGN KEY (`site_id`)
    REFERENCES `cenozo`.`site` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_writelog_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `application`.`role_has_service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `application`.`role_has_service` ;

CREATE TABLE IF NOT EXISTS `application`.`role_has_service` (
  `role_id` INT UNSIGNED NOT NULL,
  `service_id` INT UNSIGNED NOT NULL,
  `update_timestamp` TIMESTAMP NULL,
  `create_timestamp` TIMESTAMP NULL,
  PRIMARY KEY (`role_id`, `service_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  INDEX `fk_service_id` (`service_id` ASC),
  CONSTRAINT `fk_role_has_service_role_id`
    FOREIGN KEY (`role_id`)
    REFERENCES `cenozo`.`role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_role_has_service_service_id`
    FOREIGN KEY (`service_id`)
    REFERENCES `application`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `cenozo` ;

-- -----------------------------------------------------
-- Placeholder table for view `cenozo`.`participant_last_consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_consent` (`participant_id` INT, `consent_id` INT, `accept` INT, `written` INT);

-- -----------------------------------------------------
-- Placeholder table for view `cenozo`.`participant_last_written_consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cenozo`.`participant_last_written_consent` (`participant_id` INT, `consent_id` INT, `accept` INT);

-- -----------------------------------------------------
-- procedure update_participant_site_for_participant
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_participant`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_participant(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF(
           ISNULL( application_has_participant.preferred_site_id ),
           IF(
             application_has_cohort.grouping = 'jurisdiction',
             jurisdiction.site_id,
             region_site.site_id
           ),
           application_has_participant.preferred_site_id
         ) AS site_id,
         IF(
           application_has_cohort.grouping = 'jurisdiction',
           jurisdiction.site_id,
           region_site.site_id
         ) AS default_site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN jurisdiction ON address.postcode = jurisdiction.postcode
  AND jurisdiction.site_id IN ( SELECT id FROM site WHERE application_id = application.id )
  LEFT JOIN site AS jurisdiction_site ON jurisdiction.site_id = jurisdiction_site.id
  AND application.id = jurisdiction_site.application_id
  LEFT JOIN region ON address.region_id = region.id
  LEFT JOIN region_site ON region.id = region_site.region_id
  AND region_site.site_id IN ( SELECT id FROM site WHERE application_id = application.id )
  LEFT JOIN site AS region_site_site ON region_site.site_id = region_site_site.id
  AND application.id = region_site_site.application_id
  AND IFNULL( participant.language_id, application.language_id ) = region_site.language_id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE participant.id = proc_participant_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND jurisdiction.site_id <=> jurisdiction_site.id
  AND region_site.site_id <=> region_site_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_primary_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_primary_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_primary_address(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_primary_address( participant_id, address_id )
  SELECT participant.id, address.id
  FROM participant
  LEFT JOIN address ON participant.id = address.participant_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    JOIN region ON address.region_id = region.id
    -- Joining to region_site is used to exclude addresses which are not
    -- in region_site, actual linkage (and language) is irrelevant
    JOIN region_site ON region.id = region_site.region_id
    WHERE address.active = true
    AND address.international = false
    AND address.region_id IS NOT NULL
    AND address.postcode IS NOT NULL
    AND participant.id = address.participant_id
    GROUP BY address.participant_id
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_first_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_first_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_first_address(IN proc_participant_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_first_address( participant_id, address_id )
  SELECT participant.id, address.id
  FROM participant
  LEFT JOIN address ON participant.id = address.participant_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    WHERE address.active
    AND participant.id = address.participant_id
    AND CASE MONTH( CURRENT_DATE() )
      WHEN 1 THEN address.january
      WHEN 2 THEN address.february
      WHEN 3 THEN address.march
      WHEN 4 THEN address.april
      WHEN 5 THEN address.may
      WHEN 6 THEN address.june
      WHEN 7 THEN address.july
      WHEN 8 THEN address.august
      WHEN 9 THEN address.september
      WHEN 10 THEN address.october
      WHEN 11 THEN address.november
      WHEN 12 THEN address.december
      ELSE 0 END = 1
    GROUP BY address.participant_id
  )
  WHERE participant.id = proc_participant_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_jurisdiction
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_jurisdiction`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_jurisdiction(IN proc_jurisdiction_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF( 
           ISNULL( application_has_participant.preferred_site_id ),
           jurisdiction.site_id,
           application_has_participant.preferred_site_id
         ),
         jurisdiction.site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN jurisdiction ON address.postcode = jurisdiction.postcode
  AND jurisdiction.site_id IN ( SELECT id FROM site WHERE application_id = application.id )
  LEFT JOIN site AS jurisdiction_site ON jurisdiction.site_id = jurisdiction_site.id
  AND application.id = jurisdiction_site.application_id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE application_has_cohort.grouping = "jurisdiction"
  AND jurisdiction.id = proc_jurisdiction_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND jurisdiction.site_id <=> jurisdiction_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_participant_site_for_region_site
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_participant_site_for_region_site`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_participant_site_for_region_site(IN proc_region_site_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO participant_site( application_id, participant_id, site_id, default_site_id )
  SELECT application.id,
         participant.id,
         IF(
           ISNULL( application_has_participant.preferred_site_id ),
           region_site.site_id,
           application_has_participant.preferred_site_id
         ),
         region_site.site_id
  FROM application
  CROSS JOIN participant
  JOIN application_has_cohort ON application.id = application_has_cohort.application_id
  AND application_has_cohort.cohort_id = participant.cohort_id
  LEFT JOIN participant_primary_address ON participant.id = participant_primary_address.participant_id
  LEFT JOIN address ON participant_primary_address.address_id = address.id
  LEFT JOIN region ON address.region_id = region.id
  LEFT JOIN region_site ON region.id = region_site.region_id
  AND region_site.site_id IN ( SELECT id FROM site WHERE application_id = application.id )
  LEFT JOIN site AS region_site_site ON region_site.site_id = region_site_site.id
  AND application.id = region_site_site.application_id
  AND IFNULL( participant.language_id, application.language_id ) = region_site.language_id
  LEFT JOIN application_has_participant ON application.id = application_has_participant.application_id
  AND application_has_participant.participant_id = participant.id
  WHERE region_site.id = proc_region_site_id
  -- we need to match the sites or we might get links to sites in the wrong application
  AND region_site.site_id <=> region_site_site.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_alternate_first_address
-- -----------------------------------------------------

USE `cenozo`;
DROP procedure IF EXISTS `cenozo`.`update_alternate_first_address`;

DELIMITER $$
USE `cenozo`$$
CREATE PROCEDURE update_alternate_first_address(IN proc_alternate_id INT(10) UNSIGNED)
BEGIN
  REPLACE INTO alternate_first_address( alternate_id, address_id )
  SELECT alternate.id, address.id
  FROM alternate
  LEFT JOIN address ON alternate.id = address.alternate_id
  AND address.rank <=> (
    SELECT MIN( address.rank )
    FROM address
    WHERE address.active
    AND alternate.id = address.alternate_id
    AND CASE MONTH( CURRENT_DATE() )
      WHEN 1 THEN address.january
      WHEN 2 THEN address.february
      WHEN 3 THEN address.march
      WHEN 4 THEN address.april
      WHEN 5 THEN address.may
      WHEN 6 THEN address.june
      WHEN 7 THEN address.july
      WHEN 8 THEN address.august
      WHEN 9 THEN address.september
      WHEN 10 THEN address.october
      WHEN 11 THEN address.november
      WHEN 12 THEN address.december
      ELSE 0 END = 1
    GROUP BY address.alternate_id
  )
  WHERE alternate.id = proc_alternate_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `cenozo`.`participant_last_consent`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `cenozo`.`participant_last_consent` ;
DROP TABLE IF EXISTS `cenozo`.`participant_last_consent`;
USE `cenozo`;
CREATE OR REPLACE VIEW `cenozo`.`participant_last_consent` AS
SELECT participant.id AS participant_id, t1.id AS consent_id, t1.accept, t1.written
FROM participant
LEFT JOIN consent t1
ON participant.id = t1.participant_id
AND t1.date = (
  SELECT MAX( t2.date )
  FROM consent t2
  WHERE t1.participant_id = t2.participant_id
)
GROUP BY participant.id;

-- -----------------------------------------------------
-- View `cenozo`.`participant_last_written_consent`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `cenozo`.`participant_last_written_consent` ;
DROP TABLE IF EXISTS `cenozo`.`participant_last_written_consent`;
USE `cenozo`;
CREATE OR REPLACE VIEW `cenozo`.`participant_last_written_consent` AS
SELECT participant.id AS participant_id, t1.id AS consent_id, t1.accept
FROM participant
LEFT JOIN consent t1
ON participant.id = t1.participant_id
AND t1.date = (
  SELECT MAX( t2.date )
  FROM consent t2
  WHERE t1.participant_id = t2.participant_id
  AND written = 1
)
GROUP BY participant.id;
USE `application` ;

-- -----------------------------------------------------
-- Placeholder table for view `application`.`user_last_activity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `application`.`user_last_activity` (`user_id` INT, `activity_id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `application`.`site_last_activity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `application`.`site_last_activity` (`site_id` INT, `activity_id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `application`.`role_last_activity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `application`.`role_last_activity` (`role_id` INT, `activity_id` INT);

-- -----------------------------------------------------
-- View `application`.`user_last_activity`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `application`.`user_last_activity` ;
DROP TABLE IF EXISTS `application`.`user_last_activity`;
USE `application`;
CREATE  OR REPLACE VIEW `user_last_activity` as
SELECT user.id AS user_id,
       activity.id AS activity_id
FROM cenozo.user
JOIN activity on user.id = activity.user_id
WHERE activity.datetime = (
  SELECT MAX( a.datetime )
  FROM activity a
  WHERE a.user_id = user.id
);

-- -----------------------------------------------------
-- View `application`.`site_last_activity`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `application`.`site_last_activity` ;
DROP TABLE IF EXISTS `application`.`site_last_activity`;
USE `application`;
CREATE  OR REPLACE VIEW `site_last_activity` as
SELECT site.id AS site_id,
       activity.id AS activity_id
FROM cenozo.site
JOIN activity on site.id = activity.site_id
WHERE activity.datetime = (
  SELECT MAX( a.datetime )
  FROM activity a
  WHERE a.site_id = site.id
);

-- -----------------------------------------------------
-- View `application`.`role_last_activity`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `application`.`role_last_activity` ;
DROP TABLE IF EXISTS `application`.`role_last_activity`;
USE `application`;
CREATE  OR REPLACE VIEW `role_last_activity` as
SELECT role.id AS role_id,
       activity.id AS activity_id
FROM cenozo.role
JOIN activity on role.id = activity.role_id
WHERE activity.datetime = (
  SELECT MAX( a.datetime )
  FROM activity a
  WHERE a.role_id = role.id
);
USE `cenozo`;

DELIMITER $$

USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_BEFORE_INSERT` BEFORE INSERT ON `participant` FOR EACH ROW
BEGIN
  DELETE FROM unique_identifier_pool WHERE uid = new.uid;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_BEFORE_INSERT` BEFORE INSERT ON `address` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM address
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_AFTER_INSERT` AFTER INSERT ON `address` FOR EACH ROW
BEGIN
  IF NEW.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( NEW.alternate_id );
  ELSE
    CALL update_participant_first_address( NEW.participant_id );
    CALL update_participant_primary_address( NEW.participant_id );
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_BEFORE_UPDATE` BEFORE UPDATE ON `address` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM address
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_AFTER_UPDATE` AFTER UPDATE ON `address` FOR EACH ROW
BEGIN
  IF NEW.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( NEW.alternate_id );
  ELSE
    CALL update_participant_first_address( NEW.participant_id );
    CALL update_participant_primary_address( NEW.participant_id );
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_BEFORE_DELETE` BEFORE DELETE ON `address` FOR EACH ROW
BEGIN
  IF OLD.alternate_id IS NOT NULL THEN
    DELETE FROM alternate_first_address WHERE alternate_id = OLD.alternate_id;
  ELSE
    DELETE FROM participant_first_address WHERE participant_id = OLD.participant_id;
    DELETE FROM participant_primary_address WHERE participant_id = OLD.participant_id;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`address_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`address_AFTER_DELETE` AFTER DELETE ON `address` FOR EACH ROW
BEGIN
  IF OLD.alternate_id IS NOT NULL THEN
    CALL update_alternate_first_address( OLD.alternate_id );
  ELSE
    CALL update_participant_first_address( OLD.participant_id );
    CALL update_participant_primary_address( OLD.participant_id );
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_BEFORE_INSERT` BEFORE INSERT ON `jurisdiction` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM jurisdiction
    JOIN site ON jurisdiction.site_id = site.id
    WHERE jurisdiction.postcode = NEW.postcode
    AND site.application_id = (
      SELECT application_id FROM site
      WHERE id = NEW.site_id
    )
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.postcode,
      "' for key 'uq_site_id_postcode'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_INSERT` AFTER INSERT ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_BEFORE_UPDATE` BEFORE UPDATE ON `jurisdiction` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM jurisdiction
    JOIN site ON jurisdiction.site_id = site.id
    WHERE jurisdiction.postcode = NEW.postcode
    AND site.application_id = (
      SELECT application_id FROM site
      WHERE id = NEW.site_id
    )
    AND jurisdiction.id != NEW.id
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.postcode,
      "' for key 'uq_site_id_postcode'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_UPDATE` AFTER UPDATE ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_BEFORE_DELETE` BEFORE DELETE ON `jurisdiction` FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE site_id = OLD.site_id;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`jurisdiction_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`jurisdiction_AFTER_DELETE` AFTER DELETE ON `jurisdiction` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_jurisdiction( OLD.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`phone_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`phone_BEFORE_INSERT` BEFORE INSERT ON `phone` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM phone
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`phone_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`phone_BEFORE_UPDATE` BEFORE UPDATE ON `phone` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  ELSE
    SET @test = (
      SELECT COUNT(*) FROM phone
      WHERE rank = NEW.rank
      AND alternate_id <=> NEW.alternate_id
      AND participant_id <=> NEW.participant_id
    );
    IF @test > 1 THEN
      -- trigger unique key conflict
      SET @sql = CONCAT(
        "Duplicate entry '",
        NEW.alternate_id, "-", NEW.participant_id, "-", NEW.rank,
        "' for key 'uq_alternate_id_participant_id_rank'"
      );
      SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
    END IF;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`note_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`note_BEFORE_INSERT` BEFORE INSERT ON `note` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`note_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`note_BEFORE_UPDATE` BEFORE UPDATE ON `note` FOR EACH ROW
BEGIN
  IF ( NEW.alternate_id IS NULL AND NEW.participant_id IS NULL ) or
     ( NEW.alternate_id IS NOT NULL AND NEW.participant_id IS NOT NULL ) THEN
    -- trigger column-not-null error
    SIGNAL SQLSTATE '23000'
    SET MESSAGE_TEXT = "Either column 'alternate_id' or 'participant_id' cannot be null",
    MYSQL_ERRNO = 1048;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_AFTER_INSERT` AFTER INSERT ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( NEW.preferred_site_id ) THEN
    CALL update_participant_site_for_participant( NEW.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_AFTER_UPDATE` AFTER UPDATE ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( NEW.preferred_site_id != OLD.preferred_site_id ) THEN
    CALL update_participant_site_for_participant( NEW.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`application_has_participant_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`application_has_participant_BEFORE_DELETE` BEFORE DELETE ON `application_has_participant` FOR EACH ROW
BEGIN

  IF( OLD.preferred_site_id ) THEN
    DELETE FROM participant_site
    WHERE participant_id = OLD.participant_id;
    CALL update_participant_site_for_participant( OLD.participant_id );
  END IF;

END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_BEFORE_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_BEFORE_INSERT` BEFORE INSERT ON `region_site` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM region_site
    JOIN site ON region_site.site_id = site.id
    WHERE region_site.region_id = NEW.region_id
    AND region_site.language_id = NEW.language_id
    AND site.application_id = (
      SELECT application_id FROM site
      WHERE id = NEW.site_id
    )
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.region_id, "-", NEW.language_id,
      "' for key 'uq_site_id_region_id_language_id'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_AFTER_INSERT` AFTER INSERT ON `region_site` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_BEFORE_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_BEFORE_UPDATE` BEFORE UPDATE ON `region_site` FOR EACH ROW
BEGIN
  SET @test = (
    SELECT COUNT(*) FROM region_site
    JOIN site ON region_site.site_id = site.id
    WHERE region_site.region_id = NEW.region_id
    AND region_site.language_id = NEW.language_id
    AND site.application_id = (
      SELECT application_id FROM site
      WHERE id = NEW.site_id
    )
    AND region_site.id != NEW.id
  );
  IF @test > 0 THEN
    -- trigger unique key conflict
    SET @sql = CONCAT(
      "Duplicate entry '",
      NEW.site_id, "-", NEW.region_id, "-", NEW.language_id,
      "' for key 'uq_site_id_region_id_language_id'"
    );
    SIGNAL SQLSTATE '23000' SET MESSAGE_TEXT = @sql, MYSQL_ERRNO = 1062;
  END IF;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_AFTER_UPDATE` AFTER UPDATE ON `region_site` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( NEW.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_BEFORE_DELETE` BEFORE DELETE ON `region_site` FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE site_id = OLD.site_id;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`region_site_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`region_site_AFTER_DELETE` AFTER DELETE ON `region_site` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_region_site( OLD.id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_primary_address_AFTER_INSERT` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_primary_address_AFTER_INSERT` AFTER INSERT ON `participant_primary_address` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.participant_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_primary_address_AFTER_UPDATE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_primary_address_AFTER_UPDATE` AFTER UPDATE ON `participant_primary_address` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( NEW.participant_id );
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_primary_address_BEFORE_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_primary_address_BEFORE_DELETE` BEFORE DELETE ON `participant_primary_address` FOR EACH ROW
BEGIN
  DELETE FROM participant_site
  WHERE participant_id = OLD.participant_id;
END;$$


USE `cenozo`$$
DROP TRIGGER IF EXISTS `cenozo`.`participant_primary_address_AFTER_DELETE` $$
USE `cenozo`$$
CREATE DEFINER = CURRENT_USER TRIGGER `cenozo`.`participant_primary_address_AFTER_DELETE` AFTER DELETE ON `participant_primary_address` FOR EACH ROW
BEGIN
  CALL update_participant_site_for_participant( OLD.participant_id );
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
