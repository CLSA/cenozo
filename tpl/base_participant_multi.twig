{##
 # base_participant_multi.twig
 # 
 # Base form elements required to perform an action on multiple participants
 # @author Patrick Emond <emondpd@mcmaster.ca>
 # @see widget.twig for parameters
 #}
{% extends "widget.twig" %}

{% block javascript %}

  {{ parent() }}
  <script type="text/javascript" src="{{ constant('JS_URL') }}/md5.js"></script>
  <script type="text/javascript">

    function get_arguments( $inputs ) {
      var args = new Object();
      $inputs.each( function() {
        var id_string = $(this).attr( "id" );
        var param_name = id_string.substring( id_string.lastIndexOf('__') + 2 );
        if( "update" != param_name )
          args[param_name] = "checkbox" == $(this).attr( "type" )
                           ? ( $(this).is( ":checked" ) ? 1 : 0 )
                           : $(this).val();
      } );
      return args;
    }

    $( function () {
      // file button handler
      $( "#{{ widget.full }}__file" ).change( function() {
        var file = this.files[0];
        if( 0 == file.size ) {
          alert( "Unable to proceed, the file you selected is empty." );
          $(this).val( "" );
        } else {
          // upload the file
          ajax_push(
            "self",
            "temporary_file",
            file,
            function( request ) {
              if( 200 == request.status ) {
                var reader = new FileReader();
                reader.onload = function(e) {
                  md5 = hex_md5( e.target.result );
                  $( "#{{ widget.full }}__md5" ).val( md5 );
                  $( "#{{ widget.full }}__file_confirmation" ).html( " (upload successful)" );
                }
                reader.readAsBinaryString( file );
              }
            } );
        }
      } );

      // update button
      $( "#{{ widget.full }}__update" ).click( function () {
        var args = get_arguments( $( "#{{ widget.full }}_form :input" ) );
        var data = ajax_pull( "{{ widget.subject }}", "{{ widget.name }}", args );
        if( undefined != data ) {
          var html = '<table style="width:34%; margin-left:33%; margin-right:33%">';
          for( var key in data )
          {
            html += '<tr><td class="heading">' + key +
                    '</td><td>' + data[key] +
                    '</td></tr>';
          }
          html += '</table>' +
                  '<div class="spacer" style="text-align: right">' +
                  '<button id="{{ widget.full }}__proceed" style="width:120px">Proceed</button>' +
                  '</div>';
          $( "#{{ widget.full }}__results" ).html( html );
          $( "#{{ widget.full }}__proceed" ).button();
        }

        $( "#{{ widget.full }}__proceed" ).click( function () {
          var args = get_arguments( $( "#{{ widget.full }}_form :input" ) );
          if( ajax_push( "{{ widget.subject }}", "{{ widget.name }}", args ) ) {
            // let the user know the operation is complete and delete the proceed button
            $(this).remove();
            alert( "The operation was successful." );
          }
        } );
      } );
    } );
  </script>

{% endblock javascript %}

{% block widget %}
  <div id="{{ widget.full }}_form" class="ui-widget ui-widget-content app-widget-content">
    <div class="spacer">
      <p>
        Provide a list of participant UIDs which you wish to affect.
        UIDs must be separated by a comma or space and may be qualified by single
        or double quotes (ie: A123456 B123456 C123456).
      </p>
      <p>
        Alternatively, provide a CSV file where the first column is a list of UIDs
        which you wish to affect.
      </p>
    </div>

    {# put hidden parameters here #}
    {% for param_id, param in parameters %}
      {% if 'hidden' == param.type %}
        {% set param_value = param.value is defined ? param.value : "" %}
        <input id="{{ widget.full }}__{{ param_id }}" type="hidden" value="{{ param_value }}" />
      {% endif %}
    {% endfor %}

    <div class="spacer">{{ description|default( "" ) }}</div>
    <table>
      {% for param_id, param in parameters %}
        {# make null entries an empty string #}
        {% set param_value = param.value is defined ? param.value : "" %}
        
        {% if 'enum' == param.type and 1 == param.enum|length %}
  
          {# don't display enums where there is only one possible value #}
          <tr><td style="height:0px">
          {% for value_id, value in param.enum %}
            <input id="{{ widget.full }}__{{ param_id }}" type="hidden"
                   value="{{ 'NULL' == value_id ? '' : value_id }}" />
          {% endfor %}
          </td></tr>

        {% elseif 'separator' == param.type %}
          <tr><td colspan="2"><hr class="ui-widget ui-widget-content"></td></tr>
        {% elseif 'hidden' != param.type %}

          <tr>
            <td class="heading">
              <span class="title">{{ param.heading }}:</span>
            </td>
            <td class="content">
  
            {% if 'boolean' == param.type %}
          
              <select id="{{ widget.full }}__{{ param_id }}"
                      style="width: 100%"
                      class="ui-state-default">
                {% if not param.required %}
                  <option{{ '' == param_value ? ' selected' : '' }} value=""></option>
                {% endif %}
                <option{{ 'Yes' == param_value ? ' selected' : '' }} value="1">Yes</option>
                <option{{ 'No' == param_value ? ' selected' : '' }} value="0">No</option>
              </select>
        
            {% elseif 'datetime' == param.type %}
        
              <script type="text/javascript">
                $( function () {
                  $( "#{{ widget.full }}__{{ param_id }}" ).datetimepicker( {
                    dateFormat: 'yy-mm-dd',
                    timeFormat: 'hh:mm',
                    ampm: false,
                    stepMinute: 5,
                    {% if param.min_date|default( false ) %}
                      minDateTime: new Date( '{{ param.min_date }}' ),
                    {% endif %}
                    {% if param.max_date|default( false ) %}
                      maxDateTime: new Date( '{{ param.max_date }}' ),
                    {% endif %}
                    showAnim: 'slideDown'
                  } );
                } );
              </script>
              <input id="{{ widget.full }}__{{ param_id }}" type="text" style="width:99%"
                     value="{{ param_value }}" readonly />
        
            {% elseif 'date' == param.type %}
        
              <script type="text/javascript">
                $( function () {
                  $( "#{{ widget.full }}__{{ param_id }}" ).datepicker( {
                    dateFormat: 'yy-mm-dd',
                    {% if param.min_date|default( false ) %}
                      minDate: new Date( '{{ param.min_date }}' ),
                    {% endif %}
                    {% if param.max_date|default( false ) %}
                      maxDate: new Date( '{{ param.max_date }}' ),
                    {% endif %}
                    showAnim: 'slideDown'
                  } );
                } );
              </script>
              <input id="{{ widget.full }}__{{ param_id }}" type="text" style="width:99%"
                     value="{{ param_value }}" readonly />
        
            {% elseif 'time' == param.type %}
        
              <script type="text/javascript">
                $( function () {
                  $( "#{{ widget.full }}__{{ param_id }}" ).timepicker( {
                    timeFormat: 'hh:mm',
                    showAnim: 'slideDown',
                    ampm: false,
                    stepMinute: 5
                    {% if "start_time" == param_id %}
                    , onClose: function( timeText, date_inst, time_inst ) {
                      // update end_time
                      end_time_obj =
                        new Date( "Jan 2, 2000 " + $( "#{{ widget.full }}__end_time" ).val() );
                      old_time_obj = 
                        new Date( "Jan 2, 2000 " + date_inst.lastVal );
                      new_time_obj = new Date( "Jan 2, 2000 " + timeText );
                      end_time_obj.setTime(
                        end_time_obj.getTime() +
                        ( new_time_obj.getTime() - old_time_obj.getTime() ) );
                      var hours = ( end_time_obj.getHours() < 10 ? '0' : '' ) +
                                  end_time_obj.getHours();
                      var minutes = ( end_time_obj.getMinutes() < 10 ? '0' : '' ) +
                                    end_time_obj.getMinutes();
                      $( "#{{ widget.full }}__end_time" ).val( hours + ":" + minutes );
                    }
                    {% endif %}
                  } );
                } );
              </script>
              <input id="{{ widget.full }}__{{ param_id }}" type="text" style="width:99%"
                     value="{{ param_value }}" readonly />
        
            {% elseif 'enum' == param.type %}
            
              {# display all values in a select #}
              <select id="{{ widget.full }}__{{ param_id }}"
                      style="width: 100%"
                      class="ui-state-default">
                {% for value_id, value in param.enum %}
                  <option{{ param_value == value_id ? ' selected' : '' }}
                           value="{{ 'NULL' == value_id ? '' : value_id }}">{{ value }}</option>
                {% endfor %}
              </select>
      
            {% elseif 'string' == param.type or 'number' == param.type %}
          
              <input id="{{ widget.full }}__{{ param_id }}" type="text" style="width:99%"
                     value="{{ param_value }}" />
          
            {% elseif 'text' == param.type %}
          
              <textarea id="{{ widget.full }}__{{ param_id }}">{{ param_value }}</textarea>
          
            {% endif %}
        
            {% if param.note is defined %}
              <div class="help_note">
                {% autoescape false %}
                  {{ param.note }}
                {% endautoescape %}
              </div>
            {% endif %}
            </td>
          </tr>

        {% endif %}
      {% endfor %}
      <tr>
        <td class="heading">
          <span class="title">CSV file:</span>
        </td>
        <td class="content">
          <input type="hidden" id="{{ widget.full }}__md5" value="" />
          <input type="file" id="{{ widget.full }}__file" name="file" />
          <span id="{{ widget.full }}__file_confirmation" />
        </td>
      </tr>
      <tr>
        <td class="heading">
          <span class="title">UID list:</span>
        </td>
        <td class="content">
          <textarea id="{{ widget.full }}__uid_list" style="height: 16em;"></textarea>
        </td>
      </tr>
    </table>
    <div class="spacer" style="text-align: right">
      <button id="{{ widget.full }}__update" style="width:120px">Update</button>
    </div>
    <div id="{{ widget.full }}__results"></div>
  </div>

{% endblock widget %}
