define(function(){"use strict";try{var module=cenozoApp.module("consent",true)}catch(err){console.warn(err);return}angular.extend(module,{identifier:{parent:{subject:"participant",column:"participant.uid"}},name:{singular:"consent",plural:"consents",possessive:"consent's",friendlyColumn:"datetime"},columnList:{consent_type:{column:"consent_type.name",title:"Consent Type"},accept:{title:"Accept",type:"boolean"},written:{title:"Written",type:"boolean"},datetime:{title:"Date & Time",type:"datetime"}},defaultOrder:{column:"datetime",reverse:true}});module.addInputGroup("",{consent_type_id:{title:"Consent Type",type:"enum",isConstant:"view"},accept:{title:"Accept",type:"boolean",isConstant:"view"},written:{title:"Written",type:"boolean",isConstant:"view",isExcluded:function($state,model){return!model.isAdministrator()}},datetime:{title:"Date & Time",type:"datetimesecond",max:"now"},note:{title:"Note",type:"text"}});cenozo.providers.directive("cnConsentAdd",["CnConsentModelFactory",function(CnConsentModelFactory){return{templateUrl:module.getFileUrl("add.tpl.html"),restrict:"E",scope:{model:"=?"},controller:function($scope){if(angular.isUndefined($scope.model))$scope.model=CnConsentModelFactory.root}}}]);cenozo.providers.directive("cnConsentList",["CnConsentModelFactory",function(CnConsentModelFactory){return{templateUrl:module.getFileUrl("list.tpl.html"),restrict:"E",scope:{model:"=?"},controller:function($scope){if(angular.isUndefined($scope.model))$scope.model=CnConsentModelFactory.root}}}]);cenozo.providers.directive("cnConsentView",["CnConsentModelFactory",function(CnConsentModelFactory){return{templateUrl:module.getFileUrl("view.tpl.html"),restrict:"E",scope:{model:"=?"},controller:function($scope){if(angular.isUndefined($scope.model))$scope.model=CnConsentModelFactory.root}}}]);cenozo.providers.factory("CnConsentAddFactory",["CnBaseAddFactory",function(CnBaseAddFactory){var object=function(parentModel){CnBaseAddFactory.construct(this,parentModel)};return{instance:function(parentModel){return new object(parentModel)}}}]);cenozo.providers.factory("CnConsentListFactory",["CnBaseListFactory",function(CnBaseListFactory){var object=function(parentModel){CnBaseListFactory.construct(this,parentModel)};return{instance:function(parentModel){return new object(parentModel)}}}]);cenozo.providers.factory("CnConsentViewFactory",["CnBaseViewFactory","CnHttpFactory",function(CnBaseViewFactory,CnHttpFactory){var object=function(parentModel,root){CnBaseViewFactory.construct(this,parentModel,root)};return{instance:function(parentModel,root){return new object(parentModel,root)}}}]);cenozo.providers.factory("CnConsentModelFactory",["CnBaseModelFactory","CnConsentListFactory","CnConsentAddFactory","CnConsentViewFactory","CnHttpFactory","CnSession",function(CnBaseModelFactory,CnConsentListFactory,CnConsentAddFactory,CnConsentViewFactory,CnHttpFactory,CnSession){var object=function(root){var self=this;CnBaseModelFactory.construct(this,module);this.addModel=CnConsentAddFactory.instance(this);this.listModel=CnConsentListFactory.instance(this);this.viewModel=CnConsentViewFactory.instance(this,root);this.getBreadcrumbTitle=function(){var consentType=self.metadata.columnList.consent_type_id.enumList.findByProperty("value",this.viewModel.record.consent_type_id);return consentType?consentType.name:"unknown"};this.isAdministrator=function(){return"administrator"==CnSession.role.name};this.getMetadata=function(){return this.$$getMetadata().then(function(){return CnHttpFactory.instance({path:"consent_type",data:{select:{column:["id","name","access"]},modifier:{order:"name"}}}).query().then(function success(response){self.metadata.columnList.consent_type_id.enumList=[];response.data.forEach(function(item){self.metadata.columnList.consent_type_id.enumList.push({value:item.id,name:item.name,disabled:!item.access})})})})}};return{root:new object(true),instance:function(){return new object(false)}}}])});
