cenozoApp.defineModule({name:"trace",models:["add","list"],create:module=>{angular.extend(module,{identifier:{parent:{subject:"participant",column:"participant.uid"}},name:{singular:"trace",plural:"traces",possessive:"trace'"},columnList:{uid:{column:"participant.uid",title:"UID"},cohort:{column:"cohort.name",title:"Cohort",isIncluded:function($state,model){return"trace.list"==$state.current.name}},trace_type:{column:"trace_type.name",title:"Trace Type"},datetime:{title:"Date & Time",type:"datetime"},user:{column:"user.name",title:"User"},note:{title:"Note"}},defaultOrder:{column:"datetime",reverse:true}});module.addInputGroup("",{trace_type_id:{title:"Trace Type",type:"enum"},note:{title:"Note",type:"text"}});cenozo.providers.factory("CnTraceAddFactory",["CnBaseAddFactory",function(CnBaseAddFactory){var object=function(parentModel){CnBaseAddFactory.construct(this,parentModel);this.onNew=async function(record){await this.$$onNew(record);await this.parentModel.updateTraceTypeList()}};return{instance:function(parentModel){return new object(parentModel)}}}]);cenozo.providers.factory("CnTraceModelFactory",["CnBaseModelFactory","CnTraceAddFactory","CnTraceListFactory","CnSession","CnHttpFactory","CnModalInputFactory","$state",function(CnBaseModelFactory,CnTraceAddFactory,CnTraceListFactory,CnSession,CnHttpFactory,CnModalInputFactory,$state){var object=function(root){CnBaseModelFactory.construct(this,module);this.addModel=CnTraceAddFactory.instance(this);this.listModel=CnTraceListFactory.instance(this);this.getMetadata=async function(){await this.$$getMetadata();this.metadata.columnList.trace_type_id.required=true;this.metadata.columnList.note.required=true;var response=await CnHttpFactory.instance({path:"trace_type",data:{select:{column:["id","name"]},modifier:{order:"name",limit:1e3}}}).query();this.metadata.columnList.trace_type_id.enumList=response.data.reduce((list,item)=>{if("unreachable"!=item.name||CnSession.role.allSites)list.push({value:item.id,name:item.name,disabled:false});return list},[])};this.getServiceData=function(type,columnRestrictLists){var data=this.$$getServiceData(type,columnRestrictLists);if("trace"==this.getSubjectFromState()&&"list"==this.getActionFromState()){if(angular.isUndefined(data.modifier.where))data.modifier.where=[];var all=CnSession.role.allSites;data.modifier.where.push({column:"trace_type.name",operator:all?"!=":"=",value:all?null:"site"});data.modifier.where.push({column:"participant.exclusion_id",operator:"=",value:null});data.select.column.push({table:"hold_type",column:"type"});data.modifier.where.push({column:'IFNULL( hold_type.type, "" )',operator:"!=",value:"final"})}return data};this.getViewEnabled=function(){return this.$$getViewEnabled()&&"trace"==this.getSubjectFromState()&&"list"==this.getActionFromState()};this.getAddEnabled=function(){return this.$$getAddEnabled()&&1<CnSession.role.tier&&!("trace"==this.getSubjectFromState()&&"list"==this.getActionFromState())};this.transitionToViewState=async function(record){await $state.go("participant.view",{identifier:"uid="+record.uid})};this.updateTraceTypeList=async function(){var parent=this.getParentIdentifier();var response=await CnHttpFactory.instance({path:[parent.subject,parent.identifier,"trace"].join("/"),data:{select:{column:["trace_type_id"]},modifier:{order:{"trace.datetime":true}}}}).query();if(0<response.data.length){this.metadata.columnList.trace_type_id.enumList.forEach(traceType=>{traceType.disabled=traceType.value==response.data[0].trace_type_id})}};this.checkForTrace=async function(identifier,removed,type){if(angular.isUndefined(removed))removed=false;if("address"!=type&&"phone"!=type){throw new Error('Tried to check for last contact type "'+type+'".  Must be either "address" or "phone".')}var traceResponse=true;if(null!=identifier.identifier&&"participant"==identifier.subject){var changing_count_column="active_"+type+"_count";var other_count_column="active_"+("address"==type?"phone":"address")+"_count";var response=await CnHttpFactory.instance({path:identifier.subject+"/"+identifier.identifier,data:{select:{column:["active_address_count","active_phone_count",{table:"trace_type",column:"name",alias:"trace_type"}]}}}).count();if(removed){if(1==response.data[changing_count_column]&&null==response.data.trace_type){traceResponse=await CnModalInputFactory.instance({title:"Tracing Required",message:"If you proceed the participant will no longer have an active "+type+". "+"In order to help with re-tracing contact with this participant please provide the reason "+"that you are making this change:",required:true,format:"string"}).show()}}else{if(0==response.data[changing_count_column]&&0<response.data[other_count_column]&&null!=response.data.trace_type){traceResponse=await CnModalInputFactory.instance({title:"Tracing Completed",message:"Previously to your change the participant did not have an active "+type+". "+"Please provide how the new "+type+" information was determined:",required:true,format:"string"}).show()}}}return traceResponse};this.checkForTraceRequiredAfterAddressRemoved=id=>this.checkForTrace(id,true,"address");this.checkForTraceResolvedAfterAddressAdded=id=>this.checkForTrace(id,false,"address");this.checkForTraceRequiredAfterPhoneRemoved=id=>this.checkForTrace(id,true,"phone");this.checkForTraceResolvedAfterPhoneAdded=id=>this.checkForTrace(id,false,"phone");this.setTraceReason=async function(identifier,reason){if(null!=identifier.identifier&&"participant"==identifier.subject){await CnHttpFactory.instance({path:identifier.subject+"/"+identifier.identifier,data:{explain_last_trace:{user_id:CnSession.user.id,site_id:CnSession.site.id,role_id:CnSession.role.id,application_id:CnSession.application.id,note:reason}}}).patch()}}};return{root:new object(true),instance:function(){return new object(false)}}}])}});
